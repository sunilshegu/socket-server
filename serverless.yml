service: ws-server

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs12.x
  timeout: 300
  vpc:
    securityGroupIds:
      - sg-03b610b5e95fa7be8
    subnetIds:
      - subnet-4470fc65
      - subnet-81fd7ce7
      - subnet-e64d36e8
      - subnet-05429734
      - subnet-1086d75d
      - subnet-134ac84c
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "logs:CreateLogStream"
        - "logs:CreateLogGroup"
        - "logs:PutLogEvents"
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
        - "ec2:AssignPrivateIpAddresses"
        - "ec2:UnassignPrivateIpAddresses"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:Query"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
      Resource:
        - Fn::GetAtt: [ChatTable, Arn]
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"

functions:
  connectionHandler:
    handler: handler.connectionHandler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  defaultHandler:
    handler: handler.defaultHandler
    events:
      - websocket:
          route: $default
  sendMessageHandler:
    handler: handler.sendMessageHandler
    events:
      - websocket:
          route: sendMessage

resources:
  Resources:
    ChatTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
        TableName: ${opt:stage}-connection-ddb